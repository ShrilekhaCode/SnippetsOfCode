# Import the jimmy_slots submodule
from learntools.python import jimmy_slots
# Call the get_graph() function to get Jimmy's graph
graph = jimmy_slots.get_graph()
dir(graph)
type(graph)
graph
def prettify_graph(graph):
    """Modify the given graph according to Jimmy's requests: add a title, make the y-axis
    start at 0, label the y-axis. (And, if you're feeling ambitious, format the tick marks
    as dollar amounts using the "$" symbol.)
    """
    graph.set_title("Results of 500 slot machine pulls")
    # Complete steps 2 and 3 here
    graph.set_ylim(bottom = 0)
    graph.set_ylabel(' Balance ', fontweight ='bold')
    graph.yaxis.set_major_formatter('${x:1.2f}')
    
graph = jimmy_slots.get_graph()
type(graph)
dir(graph)
prettify_graph(graph)
graph
def best_items(racers):
    """Given a list of racer dictionaries, return a dictionary mapping items to the number
    of times those items were picked up by racers who finished in first place.
    """
    winner_item_counts = {}
    for i in range(len(racers)):
        # The i'th racer dictionary
        racer = racers[i]
        # We're only interested in racers who finished in first
        if racer['finish'] == 1:
            for i in racer['items']:
                # Add one to the count for this item (adding it to the dict if necessary)
                if i not in winner_item_counts:
                    winner_item_counts[i] = 0
                winner_item_counts[i] += 1

        # Data quality issues :/ Print a warning about racers with no name set. We'll take care of it later.
        if racer['name'] is None:
            print("WARNING: Encountered racer with unknown name on iteration {}/{} (racer = {})".format(
                i+1, len(racers), racer['name'])
                 )
    return winner_item_counts
# Import luigi's full dataset of race data
from learntools.python.luigi_analysis import full_dataset

# Fix me!
def best_items(racers):
    winner_item_counts = {}
    for i in range(len(racers)):
        # i is numeric
        # The i'th racer dictionary
        racer = racers[i]
        # We're only interested in racers who finished in first
        if racer['finish'] == 1:
            for j in racer['items']:
                # J is string , and will become key in dictionary with vaue as count numeric
                # Add one to the count for this item (adding it to the dict if necessary)
                if j not in winner_item_counts:
                    winner_item_counts[j] = 0
                winner_item_counts[j] += 1

        # Data quality issues :/ Print a warning about racers with no name set. We'll take care of it later.
        if racer['name'] is None:
            print("WARNING: Encountered racer with unknown name on iteration {}/{} (racer = {})".format(i+1, len(racers), racer['name']))
    return winner_item_counts

# Try analyzing the imported full dataset
best_items(full_dataset)
# Import luigi's full dataset of race data
from learntools.python.luigi_analysis import full_dataset

# Fix me!
def best_items(racers):
    winner_item_counts = {}
    for i in range(len(racers)):
        racer = racers[i]
        # We're only interested in racers who finished in first
        if racer['finish'] == 1:
            for j in racer['items']:
                # J is string , and will become key in dictionary with vaue as count numeric
                # Add one to the count for this item (adding it to the dict if necessary)
                if j not in winner_item_counts:
                    winner_item_counts[j] = 0
                winner_item_counts[j] += 1

        # Data quality issues :/ Print a warning about racers with no name set. We'll take care of it later.
        if racer['name'] is None:
            print("Encountered racer with unknown name on iteration {}/{} (racer = {})".format(
                i+1, len(racers), racer['name']))
                  
    return winner_item_counts
# Try analyzing the imported full dataset
best_items(full_dataset)
def blackjack_hand_greater_than(hand_1, hand_2):
    """
    Return True if hand_1 beats hand_2, and False otherwise.
    
    In order for hand_1 to beat hand_2 the following must be true:
    - The total of hand_1 must not exceed 21
    - The total of hand_1 must exceed the total of hand_2 OR hand_2's total must exceed 21
    
    Hands are represented as a list of cards. Each card is represented by a string.
    
    When adding up a hand's total, cards with numbers count for that many points. Face
    cards ('J', 'Q', and 'K') are worth 10 points. 'A' can count for 1 or 11.
    
    When determining a hand's total, you should try to count aces in the way that 
    maximizes the hand's total without going over 21. e.g. the total of ['A', 'A', '9'] is 21,
    the total of ['A', 'A', '9', '3'] is 14.
    
    Examples:
    >>> blackjack_hand_greater_than(['K'], ['3', '4'])
    True
    >>> blackjack_hand_greater_than(['K'], ['10'])
    False
    >>> blackjack_hand_greater_than(['K', 'K', '2'], ['3'])
    False
    """
    pass
    hand_1_total = 0
    hand_2_total = 0
    Face_Cards = {'J', 'Q', 'K'}
    dict_Cards = {"A1" : 0 , "A2" : 0}

    for i in hand_1:
        if i in Face_Cards:
            hand_1_total = hand_1_total + 10
        elif i == 'A':
            """ A either 1 or 11"""
            dict_Cards["A1"] = dict_Cards["A1"] + 1  
        else :
            """if int(i) < 10:"""
            hand_1_total = hand_1_total + int(i)
         
    if dict_Cards["A1"] > 0:
        for temp in range(dict_Cards["A1"]):
            if (hand_1_total + 11) < 21:
                hand_1_total = hand_1_total + 11
            else:
                hand_1_total = hand_1_total + 1
    
    for i in hand_2:
        if i in Face_Cards:
            hand_2_total = hand_2_total + 10
        elif i == 'A':
            """ A either 1 or 11"""
            dict_Cards["A2"] = dict_Cards["A2"] + 1  
        else: 
            """if int(i) < 10:"""
            hand_2_total = hand_2_total + int(i)
    
    if dict_Cards["A2"] > 0:
        for temp in range(dict_Cards["A2"]):
            if (hand_2_total + 11) < 21:
                hand_2_total = hand_2_total + 11
            else:
                hand_2_total = hand_2_total + 1          

    return (hand_1_total <= 21) and (hand_1_total > hand_2_total or hand_2_total > 21)
